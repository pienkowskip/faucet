#!/usr/bin/env ruby

require 'plunder'
require 'plunder/moon_faucet'

begin
  app = Plunder.new('../configs/ovh.yml')
  faucets = [
      ['http://moonbit.co.in/', '3Mwcxhog8gVUu7Wk5U9pAgxeauuW9YkYtY'],
      ['http://moonliteco.in/', 'LfgBFMbZWmQrK54HRzxftPKWuqWm2jDZad'],
      ['http://moondoge.co.in/', '9rowG76piqa9b4PsrgEtuMz8eqoxk1NH5M'],
  ]

  ['INT', 'TERM'].each do |signal|
    Signal.trap(signal) do
      app.logger.info { '[%s] signal received. Quitting.' % signal }
      exit
    end
  end
  app.setup_browser

  faucets.map! do |url, address|
    faucet = Plunder::MoonFaucet.new(app.dm, url, address)
    task = -> do
      delay = nil
      begin
        faucet.claim
        app.browser.visit('about:blank')
      rescue Plunder::Error => exc
        app.logger.error { 'Faucet claiming error: %s (%s).' % [exc.message, exc.class] }
        app.diagnostic_dump(exc)
        delay = faucet.next_claim_delay(exc)
        app.restart_browser if exc.is_a?(Plunder::FatalBrowserError)
      end
      delay = faucet.next_claim_delay unless delay
      app.dm.scheduler.add_task(task, Time.new + delay)
    end
    app.dm.scheduler.add_task(task, Time.new)
  end

  loop do
    app.dm.scheduler.execute_next_task
  end
rescue => exc
  begin
    app.logger.fatal { "Uncaught exception: #{exc.message} (#{exc.class})." }
    app.diagnostic_dump(exc)
  rescue => nested_exc
    app.logger.error { 'Error: %s (%s).' % [nested_exc.message, nested_exc.class] }
  ensure
    raise exc
  end
ensure
  begin
    app.quit_browser
  rescue => ensure_exc
    app.logger.error { 'Error: %s (%s).' % [ensure_exc.message, ensure_exc.class] }
  end
end